<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://blog.jermdavis.dev/</id>
	<title />
	<author>
		<name>Jeremy Davis</name>
	</author>
	<link rel="self" href="https://blog.jermdavis.dev/" />
	<rights>2014-2022</rights>
	<updated>2022-01-03T08:35:22Z</updated>
	<entry>
		<id>https://blog.jermdavis.dev/posts/2022/thanks-windows-installer</id>
		<title>Thanks Windows Installer - you could have just asked...</title>
		<author>
			<name>Jeremy Davis</name>
		</author>
		<link href="https://blog.jermdavis.dev/posts/2022/thanks-windows-installer" />
		<link rel="enclosure" type="image" href="https://blog.jermdavis.dev/" />
		<updated>0001-01-01T00:00:00Z</updated>
		<content>&lt;p&gt;One of the things I've been doing over the festive period is reinstalling some laptops. While it's usually a slightly tedious job, something Microsoft have done to the Windows Installer of late has made picking the Windows version you want harder than it should be. So I'm leaving myself a note for next time I crash into this problem... &lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;I needed to install Windows on shiny new laptop. It had been bought with Windows Home, because there was no "I don't need to buy a new O/S" option in the shop and I already own a Windows 10 Pro license that I wanted to use on it. So it arrived with the usual bloatware installed on Home and needed wiping.&lt;/p&gt;
&lt;p&gt;So I grabbed a USB Stick, downloaded the &lt;a rel="noopener" target="_blank" href="https://www.microsoft.com/en-gb/software-download/windows10"&gt;Windows Media Creation tool&lt;/a&gt; and made myself a bootable Windows 10 install stick. (Yes, I am still &lt;a rel="noopener" target="_blank" href="https://media.giphy.com/media/STfLOU6iRBRunMciZv/giphy.gif"&gt;actively avoiding Windows 11&lt;/a&gt; for the moment) And then I went through the usualy dance of rebooting, failing to boot from USB, realising the machine ships with only "boot from SSD" enabled and fiddling with the BIOS... But after a bit of tedium I got it to boot the installer, and went through the "delete existing disk partitions" dance to clean out all the stuff that had been shipped on the laptop.&lt;/p&gt;
&lt;p&gt;Microsoft have done a bit of UX optimisation - the installer no longer asks about your license key. In fact it asks more questions about "are you ok with uploading &amp;lt;some bit of data&amp;gt; to Microsoft" than it does about your installation requirements these day.&lt;/p&gt;
&lt;p&gt;After a few minutes (and some annoying shouting from Cortana because the laptop's default volume was "high") it went through the install fine. But when it booted up, I noticed that it was running Windows Home. Which was not what I wanted...&lt;/p&gt;
&lt;h2&gt;What's going on?&lt;/h2&gt;
&lt;p&gt;I turns out that if you're installing with &lt;a rel="noopener" target="_blank" href="https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface"&gt;UEFI&lt;/a&gt; enabled, the installer now looks into some flash memory in your computer to see if you have a built-in windows key shipped by your &lt;a rel="noopener" target="_blank" href="https://en.wikipedia.org/wiki/Original_equipment_manufacturer"&gt;OEM&lt;/a&gt;. Since I'd bought the laptop with Windows Home installed, that's what was in this memory.&lt;/p&gt;
&lt;p&gt;So the installer was happily assuming that was the key I wanted to use for my install, and not giving me an option to change the choice.&lt;/p&gt;
&lt;p&gt;You can see what (if any) key you have stored &lt;a href="https://www.nirsoft.net/utils/product_cd_key_viewer.html" rel="noopener" target="_blank"&gt;using this viewer tool&lt;/a&gt; but be aware that as I'm witing this, Windows' built-in virus protection really doesn't seem to like it. Perhaps unsurprisingly, as Microsoft might see poking about in this data as dodgy:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" href="https://blog.jermdavis.dev/img/2022/12-KeyViewerError.png"&gt;&lt;img src="https://blog.jermdavis.dev/img/2022/12-KeyViewerError.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So you may choose not to go down that road...&lt;/p&gt;
&lt;h2&gt;Possible solutions&lt;/h2&gt;
&lt;p&gt;Having spent an hour or so trawling through google for research, there seem to be two main ways to address this issue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You can let it install as above, and then use the "change my product key" option in Windows.&lt;/strong&gt;&lt;br&gt;
This will work, but it can be a bit of a hassle. Windows installs some different things for Pro compared to Home, and changing the version afterwards does not fix all of this. So if you want the full Pro experience you will need to go through the process of &lt;a rel="noopener" target="_blank" href="https://support.microsoft.com/en-us/windows/how-to-refresh-reset-or-restore-your-pc-51391d9a-eb0a-84a7-69e4-c2c1fbceb8dd"&gt;reset Windows back to the fresh-install state&lt;/a&gt; in order to get those extra bits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Or you can make use of the installer's ability to pick up extra "unattended install" data from your install media.&lt;/strong&gt;&lt;br&gt;
It is possible to put config on your install device that says "ignore what else you may see, please install Windows Pro". That will make sure all the right files are installed, and you only need to activate the right license key afterwards to get the full Pro experience.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To my mind, the second option here was the better one.&lt;/p&gt;
&lt;p&gt;You need to create a text file named &lt;code&gt;EI.cfg&lt;/code&gt; and put it into the &lt;code&gt;sources&lt;/code&gt; folder on the USB disk that the media creator set up for you. There are lots of options you can set here, using an "ini file" style format. But the key ones to get Pro vs Home are:&lt;/p&gt;
&lt;pre data-enlighter-theme="droide-text" data-enlighter-language="text" style="width:100%; overflow:scroll;"&gt;[EditionID]
ProfessionalN
[Channel]
Retail
[VL]
0
&lt;/pre&gt;
&lt;p&gt;You can also choose other versions of Windows (If you wanted the "N" version of Pro perhaps) &lt;a href="https://superuser.com/questions/1020961/prevent-windows-10-installer-from-using-the-preinstalled-serial-key-without-disa/1608112#1608112" rel="noopener" target="_blank"&gt;using the advice in this Stack Exchange answer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once that file is saved, and you run through the install processs again, you'll get your chosen version. Though it still won't say anything on the screen about which version you're installing.&lt;/p&gt;
&lt;p&gt;But note that once Windows boots up, the "Activation" page in Settings may be a bit unhappy - it will know that the Home key in your BIOS memory isn't valid for the version you have installed, so you'll need to provide your valid Pro product key to allow Windows to activate. If you log in with a Microsoft Account, and you have a Pro key attached to that it may get picked up automatically. But you might need to manually enter the right key on the Activation settings page.&lt;/p&gt;
&lt;p&gt;And with that done, I was able to get back to the fun process of installing useful stuff onto these laptops, and testing out the new hardware with &lt;a rel="noopener" target="_blank" href="https://store.steampowered.com/app/846770/DYSMANTLE/"&gt;a bit of festive relaxation&lt;/a&gt;.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;One of the things I've been doing over the festive period is reinstalling some laptops. While it's usually a slightly tedious job, something Microsoft have done to the Windows Installer of late has made picking the Windows version you want harder than it should be. So I'm leaving myself a note for next time I crash into this problem... &lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.jermdavis.dev/posts/2021/blog-migration</id>
		<title>A blog migration story</title>
		<author>
			<name>Jeremy Davis</name>
		</author>
		<link href="https://blog.jermdavis.dev/posts/2021/blog-migration" />
		<link rel="enclosure" type="image" href="https://blog.jermdavis.dev/" />
		<updated>0001-01-01T00:00:00Z</updated>
		<content>&lt;p&gt;It's been a while coming, but over the last couple of months I've finally gone throught the process of migrating my blog content off WordPress and onto a statically hosted site.  A few people have asked me why I'd go to the trouble of doing this, so while I'm having a festive break from proper Sitecore stuff, I thought I should write about my reasoning: &lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id="why-migrate"&gt;Why migrate?&lt;/h2&gt;
&lt;p&gt;This isn't the first time I've changed providers. Back in 2014 when I first started writing, I tried &lt;a href="https://www.blogger.com/" target="_blank" rel="noopener"&gt;Blogger&lt;/a&gt; initially. That didn't last long though - I found formatting code samples to be such a pain there that it drove me to &lt;a href="https://wordpress.com/" target="_blank" rel="noopener"&gt;WordPress&lt;/a&gt; after a few months.&lt;/p&gt;
&lt;p&gt;And WordPress has kept me mostly happy for the years since. But of late they've started &lt;a href="https://en.wikipedia.org/wiki/Who_Moved_My_Cheese%3F" target="_blank" rel="noopener"&gt;moving my cheese&lt;/a&gt; quite a bit. They're in the midst of rolling out a series of enhancements towards a more modern editing UI. But in doing that they've made the workflow I've been using harder - and it's started to get on my nerves. Basically I don't get on with the new block editor.&lt;/p&gt;
&lt;p&gt;So about a year ago I started looking into the idea of moving. I toyed with a few other more recent blogging platforms, but didn't find one I liked. So I started looking at hosting it myself, in order to have more control...&lt;/p&gt;
&lt;p&gt;I tried a collection of JavaScript-based site generation tools like &lt;a href="https://www.gatsbyjs.com/" target="_blank" rel="noopener"&gt;Gatsby&lt;/a&gt;, &lt;a href="https://nextjs.org/" target="_blank" rel="noopener"&gt;NextJS&lt;/a&gt; and &lt;a href="https://hexo.io/" target="_blank" rel="noopener"&gt;Hexo&lt;/a&gt;. I quite liked Hexo, and got fairly far with creating a site based on that - but kept bumping into how my lack of JavaScript knowledge would cause issues for customising it.&lt;/p&gt;
&lt;p&gt;So I went back to the drawing board and looked for something .Net based. And after a while I came across &lt;a href="https://www.statiq.dev/" target="_blank" rel="noopener"&gt;Statiq&lt;/a&gt;. It's an ongoing project to build a modern SSG using .Net core - and it fit my skills better.&lt;/p&gt;
&lt;p&gt;So moving away from Wordpress gives me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Better performance&lt;/strong&gt;&lt;br&gt;
Using an SSG is much better for &lt;a href="https://developers.google.com/web/tools/lighthouse" target="_blank" rel="noopener"&gt;lighthouse scores&lt;/a&gt;. Static files don't need runtime processing to render the content, so I can have pages that score very well:
&lt;a target="__blank" rel="noopener" href="https://blog.jermdavis.dev/img/2021/2021-12-Lighthouse.png"&gt;&lt;img src="https://blog.jermdavis.dev/img/2021/2021-12-Lighthouse.png"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control over the layout and style&lt;/strong&gt;&lt;br&gt;
There have been a few occasions over the years where I've wanted to be able to mess about with the blog theme more than the freebie WordPress behaviour lets you. Not an issue if I build the HTML myself. Though I'm sure my designer friends would say this freedom is bad for other reasons... ;-)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Picking my own domain&lt;/strong&gt;&lt;br&gt;
Again, something I could have done with paid WordPress - but is easier with a static site, and ensures I keep ownership and control over everything.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reduced risk of the platform moving out from under me&lt;/strong&gt;&lt;br&gt;
While Statiq might change in the future, it's open source, so I can always revert to a version which suits me. And while maybe one day I'll have to move hosting or DNS provider, neither of those are as big an issue as WordPress changing in ways I don't like.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I spent some time on hacking up my own site theme, and pulled together a migration tool to transfer content. And then spent far too long fiddling with the details...&lt;/p&gt;
&lt;h2 id="what-is-the-tech-stack"&gt;What is the tech stack?&lt;/h2&gt;
&lt;p&gt;As mentioned the SSG for the new site is Statiq. It's an open source project built on .Net Core. It takes a theme built on Razor Pages, and applies it to markdown files for all your pages and posts. Statiq is just a framework for running content creation pipelines, so you can compile it into whatever application you want.&lt;/p&gt;
&lt;p&gt;It comes with pipelines which do all the common blog applications, and I found I didn't need to tweak very much of its out-of-the-box behaviour, outside of the razor files:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopeners" href="https://blog.jermdavis.dev/img/2021/2021-12-Statiq.png"&gt;&lt;img src="https://blog.jermdavis.dev/img/2021/2021-12-Statiq.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I've got a .Net Core console app project (which happens to be running under .Net 6 - I was very pleased with how easy upgrading to that was) which generates all the mark-up, and handles the static files for the site. And I've made a couple of changes to the standard behaviour:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I modified the default code-block formatting to use the &lt;a href="https://github.com/EnlighterJS/EnlighterJS" target="_blank" rel="noopener"&gt;Enlighter.js&lt;/a&gt; framework. That gives me pretty code blocks in a style that I like.&lt;/li&gt;
&lt;li&gt;I added a pipleline to generate OpenGraph images for each post, based on &lt;a href="https://wellsb.com/csharp/aspnet/generate-images-statiq-imagesharp" target="_blank" rel="noopener"&gt;the example in this blog post&lt;/a&gt;. So social shares for any page get an image (along with other metadata) without any extra authoing effort.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of those were pretty easy changes to make thanks to the way Statiq works.&lt;/p&gt;
&lt;p&gt;The theme then uses &lt;a href="https://tailwindcss.com/" target="_blank" rel="noopener"&gt;Tailwind CSS&lt;/a&gt; and &lt;a href="https://alpinejs.dev/" target="_blank" rel="noopener"&gt;Alpine.js&lt;/a&gt;. I've made a first pass at minimising Tailwind, but there's more to do there to get to "nice" styles.&lt;/p&gt;
&lt;p&gt;The build process for Statiq isn't that fast with 260+ posts and all their images. But it works, and the output is easy to host. I'm pushing that to a &lt;a href="https://pages.github.com/" target="_blank" rel="noopener"&gt;GitHub pages&lt;/a&gt; site, with a bit of powershell to automate the build-and-commit task. While there are lots of different static file hosting solutions I could have used for this, that was just the simplest choice.&lt;/p&gt;
&lt;p&gt;And finally, the DNS for the custom domain for the GitHub Pages site is handled by &lt;a href="https://www.cloudflare.com/" target="_blank" rel="noopener"&gt;Cloudflare&lt;/a&gt;. Nothing clever there - just a CNAME entry in the DNS that points to the relevant thing in GitHub.&lt;/p&gt;
&lt;h2 id="whats-still-to-do"&gt;What's still to do?&lt;/h2&gt;
&lt;p&gt;Plenty. Other than a few more years of writing every couple of weeks, I've got a bit of a backlog of work still to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are a few migration tasks left. There are some big files left on WordPress that I don't want to host in GitHub Pages. So they need a new home. And eventually I'll need to exclude the old site from Google too.&lt;/li&gt;
&lt;li&gt;The styling is pretty hacky right now. While I've used the Tailwind CLI to minimise the default CSS file and got it fairly small, most of the UI still has lots of basic Tailwind classes applied. So eventually I'll need to work out how to put a better approach to styling in. Statiq does automatically compile sass into CSS - but I've not looked into how you can "include" other frameworks yet. So maybe I'll need to make use of a more traditional css build script. Similarly I'm pretty sure I could reduce the size of the JS being delivered with some more work.&lt;/li&gt;
&lt;li&gt;There's some particular situation which can cause the initial start-up of the Statiq build/preview engine to fail. Sometimes a bit of data in their pipeline state appears to go wrong and it gets a lot of null-value exceptions as it processes your templates. Restarting it, or clearing out the current output and cache seems to resolve the issue. But I don't know why yet, and I'd like to understand that and (hopefully) fix it. So there's a debugging task there.&lt;/li&gt;
&lt;li&gt;I'm not a fan of the current cookie banner code. Apart from not being convinced it's needed, it annoys me that it will still flash up briefly on page loads after it's been dismissed. I must be able to do better than that.&lt;/li&gt;
&lt;li&gt;And I need to find a better markdown file editor - I need to do a bit of research into customisable editors, where I have have snippet insertion, so I don't have to keep looking up the right order for brackets in markdown links...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But despite those things that need sorting, the initial migration seems to be a success. I wonder how long it'll take me to finish all those remaining migration tasks?&lt;/p&gt;
</content>
		<summary>&lt;p&gt;It's been a while coming, but over the last couple of months I've finally gone throught the process of migrating my blog content off WordPress and onto a statically hosted site.  A few people have asked me why I'd go to the trouble of doing this, so while I'm having a festive break from proper Sitecore stuff, I thought I should write about my reasoning: &lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.jermdavis.dev/posts/2021/hot-dr-hot-mess</id>
		<title>Is your hot disaster recovery causing a hot mess?</title>
		<author>
			<name>Jeremy Davis</name>
		</author>
		<link href="https://blog.jermdavis.dev/posts/2021/hot-dr-hot-mess" />
		<link rel="enclosure" type="image" href="https://blog.jermdavis.dev/" />
		<updated>2021-12-08T00:00:00Z</updated>
		<content>&lt;p&gt;I've had some conversations recently about odd issues with search-driven sites, whose root cause was related to disaster recovery patterns. While it's important to make sure that your business-critical website has a good backup and recovery process in place, it's also important to pay attention to how to correctly configure these scenarios...&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id="what-might-go-wrong"&gt;What might go wrong?&lt;/h2&gt;
&lt;p&gt;One example of the issues I've seen went something like this: The client had a website which was heavily relient on search. They had a large product offering in Sitecore, which had integrations with back-end systems to keep the content up-to-date and they had these items configured to be indexed by ContentSearch. Their site was running SolrCloud as it's back-end search technology, and it was configured with "switch on rebuild" enabled, to ensure that searches continued to work even during large, slow full index rebuilds.&lt;/p&gt;
&lt;p&gt;But there was an intermittent issue with the site. Editors would update products, publish their changes, and observe that the public site had updated correctly. But later these changes would disappear from search again. Older, out-of-date results would become visible on the site every so often. And unsurprisingly that behaviour was a problem for the client...&lt;/p&gt;
&lt;p&gt;Most people's initial assumption with an issue like this would be to look at Solr. If the search results go from "correct" to "wrong" without obvious user intervention then that implies a problem with how data is indexed. But Solr itself isn't the root cause here. Spending time examining the details of the search configuration, and how it processes data at runtime will often show up the same core problem: Solr will happily index the correct data, but every so often it will receive an unexpected "swap aliases" command from the "switch on rebuild" process. That causes the search engine to start serving content from an old (out of date) version of the index - leading to the odd results users were seeing.&lt;/p&gt;
&lt;p&gt;But why would it decide to swap back to the old index? The answer may well be hiding in your disaster recovery setup..&lt;/p&gt;
&lt;h2 id="what-patterns-are-people-aiming-for"&gt;What patterns are people aiming for?&lt;/h2&gt;
&lt;p&gt;For search infrastructure, fault-tolerance is fairly easy with SolrCloud. You spin up three or more Solr nodes, and configure them as a load balaced cluster. Then you configure your indexes as replicated across those nodes. So if any node fails, queries and index operations are handled by other nodes, while you recover the broken one. For more scale and tolerance to faults, you spin up more nodes. And, as noted, Sitecore is often configured with "switch on rebuild" to ensure you always have an index available to query - even in the middle of a rebuild operation.&lt;/p&gt;
&lt;p&gt;To get fault tolerance for your website you spin up extra servers too. ARM Templates or Kubernetes config can make this pretty easy. It's commonly done for CD servers, but some clients I come across want uptime guarantees and service recovery KPIs to apply to their authoring environment too. So in their minds it makes sense to spin up extra copies of their standard content management role in order to ensure they have a backup in case of disaster.&lt;/p&gt;
&lt;h2 id="so-why-might-it-break"&gt;So why might it break?&lt;/h2&gt;
&lt;p&gt;The underlying issue here is indexing strategies. Your default Sitecore CM instance is configured to be the indexing role as well as the CM role for your website. That means it runs the processes which watch your databases for changes and publishing events, and when these happen it fires off the commands and data to Solr to update indexes.&lt;/p&gt;
&lt;p&gt;Most of the time that indexing process will work fine - but as Sitecore note in their documentation, you should only have one server who is responsible for index updates at any time. So if you spin up a "hot backup" content management server using the default CM config you're breaking that rule. You end up with two severs who both think they should be maintaining the Solr indexes. And that means every so often they will trip over each other and mess up your indexes.&lt;/p&gt;
&lt;p&gt;You start to see situations where your backup CM server triggers an index swap in a situation it shouldn't have - where the "offline" index is not actually up-to-date. And that makes it look like content is dropping out of your search indexes.&lt;/p&gt;
&lt;h2 id="how-should-we-fix-this"&gt;How should we fix this?&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener" href="https://doc.sitecore.com/en/developers/92/platform-administration-and-architecture/enable-the-indexing-sub-role.html"&gt;Sitecore's documentation for SolrCloud and switch-on-rebuild&lt;/a&gt; states that in any deployment, precisely one server must be responsible for indexing:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jermdavis.dev/img/2021/2021-11-SitecoreDocsNote.png" target="_blank"&gt;&lt;img alt="Note in Sitecore's doc - only one indexing role allowed" src="https://blog.jermdavis.dev/img/2021/2021-11-SitecoreDocsNote.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To achive this, you have three broad choices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Follow the documenation - disable indexing on all but one CM&lt;/b&gt;&lt;br&gt;
If you have to run backup CMs up all the time, then you can follow the documentation and use role based config to ensure that you only ever have one of them which is running the indexing role. That gives you the advantage of having your hot backup CM, while keeping a supported setup. But a disadvantage here is that you have work to do in order to ensure that your CM instances get the right config. In the scenario that your indexing-enabled CM blows up, you have to make sure that another server will pick up this role. And that may be a manual task. 
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use infrastructure automation to enable your backup CM&lt;/b&gt;&lt;br&gt;
You don't have to keep a backup running all the time. You could have a mechanism to (fairly quickly) fire up a new instance in the event of disaster, but not have it up and running during normal operations. The key advantage here is probably cost - not running a server means you don't pay for it. But the related disadvantage is that in an outage you'll need to wait for this automation to complete before you have a CM again. Your choices for doing that include:
  &lt;ul&gt;
    &lt;li&gt;Keep an ARM Template or the relevant Kubernetes config files available, so you can run them to fire up a new CM instance in an emergency. That process can be automated potentially.&lt;/li&gt;
    &lt;li&gt;Or if you run in an IaaS pattern, have the instance installed but the VM / server stopped.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Configure a separate Indexing role&lt;/b&gt;&lt;br&gt;
Sitecore supports pulling the indexing role out to a separate server. That might have licensing and runtime cost implications for you, and requires a bit of specific configuration/deployment work, but it allows your multiple CMs (who all have the same config) to share one indexing service. The advantage here is both that you have an instant backup CM in the event of an issue, and that you get to have all your CMs running the same configuration. But the downside here is cost - you're paying to run yet another role for the indexing instance.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which of these works best for you will depend on other criteria of your project of course. But you need to follow the Sitecore's rules to avoid having issues.&lt;/p&gt;
&lt;blockquote&gt;
&lt;b&gt;&lt;i&gt;Updated to add:&lt;/i&gt;&lt;/b&gt;
&lt;p&gt;After I published this, one of my colleagues pointed out another fun edge case here. There's a config setting which controls whether Sitecore tries to force aliases to exist when the site starts up:&lt;/p&gt;
&lt;pre data-enlighter-language="xml" style="width:100%; overflow:scroll;"&gt;&amp;lt;!--  ENFORCES ALIAS CREATION ON INDEX INITIALIZATION
            If enabled, index aliases will be created on Solr during the index initialization process.
            Default value: false
--&amp;gt;
&amp;lt;setting name="ContentSearch.Solr.EnforceAliasCreation" value="false" /&amp;gt;
&lt;/pre&gt;
&lt;p&gt;If you have this set to true, even if a CM server has all its index strategies set to "manual", it will still end up resetting the active alias to the "non rebuild" one each time the Sitecore process recycles. And that may well be the wrong one based on the current state of your public site...&lt;/p&gt;
&lt;p&gt;So worth checking the state of that setting if you're seeing odd behaviour with indexes, but you thought you'd followed rules above.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
		<summary>&lt;p&gt;I've had some conversations recently about odd issues with search-driven sites, whose root cause was related to disaster recovery patterns. While it's important to make sure that your business-critical website has a good backup and recovery process in place, it's also important to pay attention to how to correctly configure these scenarios...&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.jermdavis.dev/posts/2021/shipping-custom-logs-from-your-v10-containers</id>
		<title>Shipping custom logs from your v10 containers</title>
		<author>
			<name>Jeremy Davis</name>
		</author>
		<link href="https://blog.jermdavis.dev/posts/2021/shipping-custom-logs-from-your-v10-containers" />
		<link rel="enclosure" type="image" href="https://blog.jermdavis.dev/" />
		<updated>0001-01-01T00:00:00Z</updated>
		<content>&lt;p&gt;My work on a container-based v10.0 project keeps raising interesting challenges – things that don’t work quite the same way in Docker or Kubernetes, compared to the old world of "bare metal" installs of Sitecore. Custom log files are an example here...&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;I realised recently that we had some custom code in our solution, whose log data was not appearing in the Docker streamed logs. (And hence wasn’t visible in the Kubernetes container log output either) After a bit of digging I released this was because the developers had quite sensibly moved these log entries to a separate log file. Turns out that the log streaming does not pick up all logs – you have to be specific:&lt;/p&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;Inside your containers, a tool called &lt;code&gt;LogMonitor.exe&lt;/code&gt; is running. It uses disk monitoring (and other techniques, potentially) to monitor log data, and when it sees changes it streams these to “standard output".&lt;/p&gt;
&lt;p&gt;Your container orchestrator is picking up that streamed data, and sending it to whatever console or log aggregation framework your using. That might be AppInsights or Prometheus from Kubernetes in production, and it might be the Visual Studio containers window or a console under Docker.&lt;/p&gt;
&lt;p&gt;By default, this is set up to stream IIS logs and the main Sitecore log. So what do we do if we want other log files?&lt;/p&gt;
&lt;h2&gt;Extending this&lt;/h2&gt;
&lt;p&gt;If you look inside your Sitecore CM or CD containers, LogMonitor sits in a folder under the root:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jermdavis.dev/img/2021/2021-10-logmonitor.png" target="_blank"&gt;&lt;img alt="Log Monitor" src="https://blog.jermdavis.dev/img/2021/2021-10-logmonitor.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By default it’s started by the entrypoint script for the container, and it reads is configuration settings from that &lt;code&gt;json&lt;/code&gt; file sitting next to it.&lt;/p&gt;
&lt;p&gt;It's default state is:&lt;/p&gt;
&lt;pre data-enlighter-language="jscript" style="width:100%; overflow:scroll;"&gt;{
    "LogConfig": {
      "sources": [
        {
          "type": "EventLog",
          "startAtOldestRecord": false,
          "eventFormatMultiLine": false,
          "channels": [
            {
              "name": "system",
              "level": "Error"
            }
          ]
        },
        {
          "type": "File",
          "directory": "c:\\inetpub\\logs",
          "filter": "*.log",
          "includeSubdirectories": true
        },
        {
          "type": "File",
          "directory": "c:\\inetpub\\wwwroot\\App_data\\logs",
          "filter": "log.*.txt",
          "includeSubdirectories": false
        }
      ]
    }
  }
}
&lt;/pre&gt;
&lt;p&gt;So to add extra log files we can modify this. There’s some &lt;a href="https://github.com/microsoft/windows-container-tools/wiki/Authoring-a-Config-File" rel="noopener" target="_blank"&gt;documentation available on GitHub&lt;/a&gt; because it’s not just disk files you can process here. But I’m only interested in other Sitecore logs for the moment...&lt;/p&gt;
&lt;p&gt;So we could change the existing pattern there to "&lt;code&gt;*.txt&lt;/code&gt;" to bring in everything from the logs folder. But I wanted to be a bit more subtle. I tried adding an extra source which would cover just the files I care about:&lt;/p&gt;
&lt;pre data-enlighter-language="jscript" style="width:100%; overflow:scroll;"&gt;{
    "type": "File",
    "directory": "c:\\inetpub\\wwwroot\\App_data\\logs",
    "filter": "MyCustomFile.log.*.txt",
    "includeSubdirectories": false
}
&lt;/pre&gt;
&lt;p&gt;That block gets appended after the file source for the main Sitecore logs, as part of the array for "sources".&lt;/p&gt;
&lt;p&gt;But to make this work, we need to get this into our container images. How do we manage that? Extending the base image build...&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/Sitecore/docker-examples/tree/develop/custom-images/docker/build/cm" rel="noopener" target="_blank"&gt;example container setup for Sitecore includes a DockerFile&lt;/a&gt; for extending the base CM container. (You may want to do this on other roles too, of course – similar patterns apply)&lt;/p&gt;
&lt;p&gt;We can extend that file to overwrite the default config with out version. Use the VS container browser shown above to find the file and right-click "open" it to see the contents. You can then modify this, and save a copy of your changes in your docker image build folder.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jermdavis.dev/img/2021/2021-10-dockerfile.png" target="_blank"&gt;&lt;img alt="DockerFile" src="https://blog.jermdavis.dev/img/2021/2021-10-dockerfile.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can then add a simple "copy" operation into your Dockerfile:&lt;/p&gt;
&lt;pre data-enlighter-theme="droide-text" data-enlighter-language="text" style="width:100%; overflow:scroll;"&gt;# Update Log Monitor config
COPY CustomLogMonitorConfig.json C:\LogMonitor\LogMonitorConfig.json
&lt;/pre&gt;
&lt;p&gt;That will ensure your modified file will end up in the container, ready to run on startup. Note that you will need to rebuild your container images for that to take effect.&lt;/p&gt;
&lt;p&gt;But once that’s done, the extra data should appear in your streamed logs:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jermdavis.dev/img/2021/2021-10-extralogs.png" target="_blank"&gt;&lt;img alt="Extra Logs" src="https://blog.jermdavis.dev/img/2021/2021-10-extralogs.png"&gt;&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>&lt;p&gt;My work on a container-based v10.0 project keeps raising interesting challenges – things that don’t work quite the same way in Docker or Kubernetes, compared to the old world of &amp;amp;quot;bare metal&amp;amp;quot; installs of Sitecore. Custom log files are an example here...&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.jermdavis.dev/posts/2021/what-happened-to-my-itemdeleted-event</id>
		<title>What happened to my “item:deleted” event?</title>
		<author>
			<name>Jeremy Davis</name>
		</author>
		<link href="https://blog.jermdavis.dev/posts/2021/what-happened-to-my-itemdeleted-event" />
		<link rel="enclosure" type="image" href="https://blog.jermdavis.dev/" />
		<updated>0001-01-01T00:00:00Z</updated>
		<content>&lt;p&gt;My QA team had a deployment issue recently, where Azure DevOps failed to successfully release to a couple of servers. The reason for the failure wasn't obvious to me immediately, so here's a quick write-up for Google, in the hope it saves some other people.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;The reported error&lt;/h2&gt;
&lt;p&gt;The DevOps release pipeline had failed. It was the Unicorn sync step which reported an error, but the error messages were not initially helpful:&lt;/p&gt;
&lt;a href="/img/2021/releaseerror.png"&gt;
&lt;img src="https://blog.jermdavis.dev/img/2021/releaseerror.png" alt="Release Error"&gt;
&lt;/a&gt;
&lt;p&gt;For Google's benefit, the error is here:&lt;/p&gt;
&lt;pre data-enlighter-theme="droide-text" data-enlighter-highlight="15" data-enlighter-language="text" style="width:100%; overflow:scroll;"&gt;2021-09-06T10:56:24.4434898Z ##[section]Starting: Run Unicorn Sync
2021-09-06T10:56:24.4576402Z ==============================================================================
2021-09-06T10:56:24.4576705Z Task         : PowerShell
2021-09-06T10:56:24.4576990Z Description  : Run a PowerShell script on Linux, macOS, or Windows
2021-09-06T10:56:24.4577248Z Version      : 2.190.0
2021-09-06T10:56:24.4577458Z Author       : Microsoft Corporation
2021-09-06T10:56:24.4577771Z Help         : https://docs.microsoft.com/azure/devops/pipelines/tasks/utility/powershell
2021-09-06T10:56:24.4578219Z ==============================================================================
2021-09-06T10:56:25.3011750Z Generating script.
2021-09-06T10:56:25.3420551Z ========================== Starting Command Output ===========================
2021-09-06T10:56:25.3660200Z ##[command]"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -NoLogo -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command ". 'C:\azagent\A1\_work\_temp\6a50dc74-9a04-4072-afd1-03306e0b3fb2.ps1'"
2021-09-06T10:56:25.6931500Z Starting Unicorn sync
2021-09-06T10:56:26.4749680Z Sync-Unicorn: Executing Sync...
2021-09-06T10:56:26.7585296Z Sync-Unicorn : Exception calling "GetResponse" with "0" argument(s): "The
2021-09-06T10:56:26.7585814Z remote server returned an error: (500) Internal Server Error."
2021-09-06T10:56:26.7586285Z At C:\azagent\A1\_work\_temp\6a50dc74-9a04-4072-afd1-03306e0b3fb2.ps1:9 char:1
2021-09-06T10:56:26.7586747Z + Sync-Unicorn -ControlPanelUrl 'https://my-server-name/un ...
2021-09-06T10:56:26.7587192Z + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2021-09-06T10:56:26.7587616Z     + CategoryInfo          : NotSpecified: (:) [Sync-Unicorn], MethodInvocationException
2021-09-06T10:56:26.7588307Z     + FullyQualifiedErrorId : WebException,Sync-Unicorn
2021-09-06T10:56:26.7588676Z
2021-09-06T10:56:26.8984825Z ##[error]PowerShell exited with code '1'.
2021-09-06T10:56:26.9490148Z ##[section]Finishing: Run Unicorn Sync
&lt;/pre&gt;
&lt;p&gt;But basically all it says is that there was a 500 error calling Unicorn's sync endpoint.&lt;/p&gt;
&lt;h2&gt;A better error&lt;/h2&gt;
&lt;p&gt;That's not enough to solve the problem, so I needed to get some more details. The obvious thing to try was a manual sync of Unicorn. So loaded up &lt;code&gt;/unicorn.aspx&lt;/code&gt; and told it to sync everything. That told me two things initially: Firstly that the actual seralised items were syncing ok. And secondly that the error was actually happening during the automatic publish afterwards. It failed with this display in the UI:&lt;/p&gt;
&lt;a href="/img/2021/unicornerror.png"&gt;
&lt;img src="https://blog.jermdavis.dev/img/2021/unicornerror.png" alt="Detailed error"&gt;
&lt;/a&gt;
&lt;p&gt;Again, for Google's benefit:&lt;/p&gt;
&lt;pre data-enlighter-theme="droide-text" data-enlighter-language="text" style="width:100%; overflow:scroll;"&gt;Message[1]: Ensure definition type did not complete successfully. StatusCode: 500, ReasonPhrase: 'Internal Server Error', Version: 1.1, Content: System.Net.Http.StreamContent, Headers:
{
Cache-Control: private
Date: Mon, 06 Sep 2021 10:56:26 GMT
Server: Microsoft-IIS/8.5
X-AspNet-Version: 4.0.30319
X-Powered-By: ASP.NET
Content-Length: 7903
Content-Type: text/html; charset=utf-8
}
Source[1]: Sitecore.Xdb.Common.Web
at Sitecore.Xdb.Common.Web.Synchronous.SynchronousExtensions.SuspendContextLock[TResult](Func`1 taskFactory)
at Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ExperienceAnalyticsSegmentReader.GetDefinitionTypeKey()
at Sitecore.ExperienceAnalytics.Core.Repositories.ReferenceData.ExperienceAnalyticsSegmentReader.Get(Guid key, NameValueCollection readingPreferences)
at Sitecore.ExperienceAnalytics.Client.Deployment.Events.SegmentDeployedEventHandler.DeleteSegment(Item deletedItem)
at Sitecore.Events.Event.EventSubscribers.RaiseEvent(String eventName, Object[] parameters, EventResult result)

101216 11:56:26 ERROR Failed to delete the item. Item ID: {1D54ADFD-3D04-49FF-9FA1-BEC77042AE65}, database: web
Exception: System.AggregateException
Message: One or more exceptions occurred while processing the subscribers to the 'item:deleted' event.
Source: Sitecore.Kernel
at Sitecore.Events.Event.EventSubscribers.RaiseEvent(String eventName, Object[] parameters, EventResult result)
at Sitecore.Events.Event.RaiseEvent(String eventName, Object[] parameters)
at System.EventHandler`1.Invoke(Object sender, TEventArgs e)
at Sitecore.Data.Engines.EngineCommand`2.RaiseEvent[TArgs](EventHandler`1 handlers, Func`2 argsCreator)
at Sitecore.Data.Engines.EngineCommand`2.Execute()
at Sitecore.Data.Engines.DataEngine.DeleteItem(Item item)
&lt;/pre&gt;
&lt;p&gt;That error's telling us that what actually happened was that the &lt;code&gt;item:deleted&lt;/code&gt; event has a subscriber that connects to xDB. And that's what's failing here.&lt;/p&gt;
&lt;h2&gt;A soluition – and some facepalming&lt;/h2&gt;
&lt;p&gt;I spent a bit of time reading the errors above, before spotting this bit:&lt;/p&gt;
&lt;pre data-enlighter-theme="droide-text" data-enlighter-language="text" style="width:100%; overflow:scroll;"&gt;Message[1]: Ensure definition type did not complete successfully. StatusCode: 500, ReasonPhrase: 'Internal Server Error'
&lt;/pre&gt;
&lt;p&gt;And a bit of Googling pointed me to this article: "&lt;a href="https://andrewwburns.com/2019/02/07/sitecore-system-invalidoperationexception-ensure-definition-type-did-not-complete-successfully/" target="_blank"&gt;SITECORE: SYSTEM.INVALIDOPERATIONEXCEPTION: ENSURE DEFINITION TYPE DID NOT COMPLETE SUCCESSFULLY&lt;/a&gt;" and the sudden realisation that this was actually really obvious...&lt;/p&gt;
&lt;p&gt;That article points out that the message in the Sitecore logs above correlates to a message in the xConnect logs which is much more obvious:&lt;/p&gt;
&lt;pre data-enlighter-theme="droide-text" data-enlighter-language="text" style="width:100%; overflow:scroll;"&gt;[Error] XConnect Web Application Error: “System.ApplicationException:
Exception trying to intialize Service Collection and Provider for for WebAPI Dependency Resolver, Inner Exception:
Required license is missing: Sitecore.xDB.Base —&amp;gt; Sitecore.Nexus.Licensing.LicenseException: Required license is missing: Sitecore.xDB.Base
&lt;/pre&gt;
&lt;p&gt;Hence the facepalming... This whole business was another "our company's license has expired" issue – &lt;a href="https://blog.jermdavis.dev/posts/2021/sitecore-containers-and-expired-licenses" target="_blank"&gt;like the Docker issues I saw recently&lt;/a&gt;. My colleagues had correctly updated the license file for the XM roles, but it seems they forgot to update xConnect's copy of the license file. Ooops.&lt;/p&gt;
&lt;p&gt;But, problem solved, as everything sorted itself out when I updated that missed license file. So a big thank you to &lt;a href="https://twitter.com/AndrewWBurns/" rel="noopener" target="_blank"&gt;Andy Burns&lt;/a&gt; for the blog post that helped me here.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;My QA team had a deployment issue recently, where Azure DevOps failed to successfully release to a couple of servers. The reason for the failure wasn't obvious to me immediately, so here's a quick write-up for Google, in the hope it saves some other people.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.jermdavis.dev/posts/2021/symposiums-vision-for-saas</id>
		<title>Symposium's vision for SaaS</title>
		<author>
			<name>Jeremy Davis</name>
		</author>
		<link href="https://blog.jermdavis.dev/posts/2021/symposiums-vision-for-saas" />
		<link rel="enclosure" type="image" href="https://blog.jermdavis.dev/" />
		<updated>0001-01-01T00:00:00Z</updated>
		<content>&lt;p&gt;There was a lot of interesting information releases during &lt;a href="https://symposium.sitecore.com/" rel="noopener" target="_blank"&gt;Sitecore Symposium&lt;/a&gt; last week. Since I had to summarise this for a work event, I figured I should reuse those thoughts, and write up a brief summary of some of the announcements that caught my attention, and (importantly) Sitecore's vision their future SaaS product: &lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;There's lots of stuff going on:&lt;/h2&gt;
&lt;p&gt;Before I get into the SaaS business, it's worth noting it was a busy event for anouncements generally. Some highlights we heard:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;Sitecore 10.2 will be released in November&lt;/b&gt;&lt;br&gt;
Windows Server 2022 support. .Net Core upgraded to V3 for the relevant roles. Analytics reporting improvements. Ability to delete interaction data more easily. New CLI features like field exclusion for serialisation, resource file generation and search index rebuild. (The CLI improvements are also available for 10.1) Plus the usuall collection of bug fixes and performance tweaks.
&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;We now know the new branding for all the recent acquisitions&lt;/b&gt;&lt;br&gt;
Instead of Boxever, Four51, MooSend and Reflektion, we now have: Sitecore CDP / Sitecore Personalise, Sitecore OrderCloud, Sitecore Send and Sitecore Search / Sitecore Discover. Names we'll be hearing about much more in the future, I suspect.
&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Content Hub 4.1 in a month or so&lt;/b&gt;&lt;br&gt;
New schema features for references between content items. More media types supported. Extensibility for media previews.
&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;New headless framework release&lt;/b&gt;&lt;br&gt;
Updated to newer NextJS and Vue versions. Ability to publish markup from MVC components to headless services.
&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Updates to SXA in 10.2&lt;/b&gt;&lt;br&gt;
Scriban template improvements. Better data sharing for multi-site setups. Bootstrap 5 support.
&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Updates to Horizon in 10.2&lt;/b&gt;&lt;br&gt;
Improved editing experience for SXA components. Docker image supporting process isolation. UI improvements. New "content explorer" view listing all items.
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;On top of that, the SaaS vision is very interesting:&lt;/h2&gt;
&lt;p&gt;But the real excitement is with the vision for Sitecore's future SaaS offering. While we've had Content Hub as a SaaS content tool for some time now, it's had some key weak spots compared to what we're used to with classic Sitecore: It's not great with trees of content, and it doesn't provide any way to compose UI components together into a page. Those caveats mean it's not the right choice for a variety of scenarios.&lt;/p&gt;
&lt;p&gt;So Sitecore have started to talk about an alternative approach: offering a package built around the classic Sitecore XM product, but hosted via SaaS. The phrase Dave O'Flanagan used in his keynote was "The no-compromise CMS" – because it's trying to take the best bits of the traditional model and the best bits of the headless / JAMStack model, and blend them together.&lt;/p&gt;
&lt;p&gt;The high-level picture he talked about looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jermdavis.dev/img/2021/2021-10-saas-diagram.png" target="_blank"&gt;&lt;img alt="SaaS Diagram" src="https://blog.jermdavis.dev/img/2021/2021-10-saas-diagram.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So what are all the boxes on this diagram going to do for us?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Experience Manager Cloud&lt;/b&gt;&lt;br&gt;
You'll need somewhere to store your content in this model, and the technology in play is based on the classic Sitecore XM platform. It will be wrapped up in some clever SaaS sauce, so instances are automagically managed for you – it will sort out databases and Solr. When you have customisations to deploy, you'll use a GitOps approach to deployment – push to a source control branch, and those changes get deployed to your instance. It will run headless services, which will be key to how it serves content because it will be CM-only, and this won't be exposed to the public internet. Which means it never needs to scale for load – keeping the implementation simpler.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Experience Edge&lt;/b&gt;&lt;br&gt;
This isn't new (&lt;a href="https://doc.sitecore.com/en/developers/101/developer-tools/sitecore-experience-edge-for-xm.html" rel="noopener" target="_blank"&gt;you can play with it now, with your current JSS/Headless sites&lt;/a&gt;) but it's really fundamental for the new model. Edge is a cloud-scale cache for your Headless Services data. Your CM instance can publish its content, media and layout data to this service, so that your headless front-end code can read the data from here. It replaces the need for the CD servers the "old" JSS approach would have used to do this job. The magic here is that because it's a CDN-style edge cache, it scales to meet the needs of your front-end automatically. So you no longer need to provision content delivery servers.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Content Hub&lt;/b&gt;&lt;br&gt;
There is a role for Content Hub here, alongside XM – as the DAM for selecting media from.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Symphony&lt;/b&gt;&lt;br&gt;
This is the brand name they're giving to an enhanced, SaaS-hosted evolution of the Horizon editor. It gives you the full WYSIWYG editing experience for your JAMStack-style sites. It's also integrated with Personalise, to let you manage your personalisation work and examine its outcomes. Sitecore argue that this is an important differentiator for their offering, because it's bringing the editorial flexibility we've been used to with the classic CMS to the JAMStack site.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Personalise&lt;/b&gt;&lt;br&gt;
Since XM doesn't include any of the old XConnect-powered personalisation, there needs to be something to provide those services in this new model. And the "Personalise" product is a cut-down set of tools from the Boxever suite. We don't know much about what the scope of this product's set of services will be yet, however. So it will be interesting to see what features are available here by default.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Vercel&lt;/b&gt;&lt;br&gt;
The final thing you need for this system is somewhere to serve the front-end code for your website from. As mentioned, we don't have any CD servers in this world. Experience Cloud has a focus on Next.js for building your site UI, so Sitecore have chosen to partner with &lt;a href="https://vercel.com/" rel="noopener" target="_blank"&gt;Vercel&lt;/a&gt; to give you somewhere to host it. They provide a GitOps way to deploy your code quickly, and CDN-style scaling behaviour to help you cope with load without effort. But critically the infrastructure here understands the build process for your Next.js code – so it can automatically perform tasks like static site generation whenever your code gets update, or when Experience Edge triggers a webhook to signal new content has been published.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the diagram doesn't show the other new systems Sitecore has aquired, it's clear that things like Search, OrderCloud and Send will be integratable with this model too.&lt;/p&gt;
&lt;p&gt;An interesting point about the approach above, is that it's basically the next step on from what you could do with an XM 10.2 / Headless deployment in Managed Cloud. And Sitecore have said if you can migrate your site over to be able to run in that pattern, it will have a very simple migration path to the SaaS service once it's released.&lt;/p&gt;
&lt;p&gt;We've got a bit to wait to see the details of this, however – Sitecore are saying we'll see initial releases in spring next year. But this is another driver for me to finally wrap my head around headless development for Sitecore. It seems like it's pretty certain to become the new normal for projects in the future. And it looks a flexible, powerful future too.&lt;/p&gt;
&lt;p&gt;Exciting times...&lt;/p&gt;
</content>
		<summary>&lt;p&gt;There was a lot of interesting information releases during &lt;a href="https://symposium.sitecore.com/" rel="noopener" target="_blank"&gt;Sitecore Symposium&lt;/a&gt; last week. Since I had to summarise this for a work event, I figured I should reuse those thoughts, and write up a brief summary of some of the announcements that caught my attention, and (importantly) Sitecore's vision their future SaaS product: &lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.jermdavis.dev/posts/2021/sitecore-containers-and-expired-licenses</id>
		<title>Sitecore containers and expired licenses</title>
		<author>
			<name>Jeremy Davis</name>
		</author>
		<link href="https://blog.jermdavis.dev/posts/2021/sitecore-containers-and-expired-licenses" />
		<link rel="enclosure" type="image" href="https://blog.jermdavis.dev/" />
		<updated>0001-01-01T00:00:00Z</updated>
		<content>&lt;p&gt;Sometimes you have a problem that you should absolutely have seen coming. The annual "the company's Sitecore license has expired" fun is very much one of those things. But I'd not thought about this in advance, and the license expired while I was on holiday this year. It caused my team a load of hassle... But I have a plan to avoid this pain in the future: &lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;The issue&lt;/h2&gt;
&lt;p&gt;When you're running Sitecore in containers, it's not necessarily obvious when your license expires. The containers can start up – but you'll end up with some errors inside them. The identity service will fairly rapidly throw an exception in its logs:&lt;/p&gt;
&lt;pre data-enlighter-theme="droide-text" data-enlighter-language="text" style="width:100%; overflow:scroll;"&gt;&amp;lt;Source&amp;gt;EventLog&amp;lt;/Source&amp;gt;&amp;lt;Time&amp;gt;2021-09-03T19:33:25.000Z&amp;lt;/Time&amp;gt;&amp;lt;LogEntry&amp;gt;&amp;lt;Channel&amp;gt;System&amp;lt;/Channel&amp;gt;&amp;lt;Level&amp;gt;Error&amp;lt;/Level&amp;gt;&amp;lt;EventId&amp;gt;701&amp;lt;/EventId&amp;gt;&amp;lt;Message&amp;gt;Task Scheduler service failed to start Task Compatibility module. Tasks may not be able to register on previous Window versions. Additional Data: Error Value: 2147942450.&amp;lt;/Message&amp;gt;&amp;lt;/LogEntry&amp;gt;
Unhandled Exception: Sitecore.Framework.Runtime.Licensing.Exceptions.SitecoreLicenseInvalidOperationException: Invalid or expired license. [Raw]
[2021-09-03T19:33:31.000Z][LOGMONITOR] INFO: Entrypoint processs exit code: -532462766
   at Sitecore.Framework.Runtime.Licensing.LicenseValidator.LoadLicense(License license)
   at Sitecore.Framework.Runtime.Commands.SitecoreHostCommand.OnExecuteAsync(CommandLineApplication app)
   at McMaster.Extensions.CommandLineUtils.Conventions.ExecuteMethodConvention.InvokeAsync(MethodInfo method, Object instance, Object[] arguments)
   at McMaster.Extensions.CommandLineUtils.Conventions.ExecuteMethodConvention.OnExecute(ConventionContext context, CancellationToken cancellationToken)
   at McMaster.Extensions.CommandLineUtils.Conventions.ExecuteMethodConvention.&amp;lt;&amp;gt;c__DisplayClass0_0.&amp;lt;&amp;lt;Apply&amp;gt;b__0&amp;gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync(String[] args, CancellationToken cancellationToken)
   at McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync[TApp](CommandLineContext context, CancellationToken cancellationToken)
   at Sitecore.Program.&amp;lt;Main&amp;gt;(String[] args)
&lt;/pre&gt;
&lt;p&gt;But the CM container will give a less obvious error:&lt;/p&gt;
&lt;pre data-enlighter-theme="droide-text" data-enlighter-language="text" style="width:100%; overflow:scroll;"&gt;2021-09-03 19:34:33 ::1 GET /healthz/ready - 80 - ::1 Mozilla/5.0+(Windows+NT;+Windows+NT+10.0;+en-US)+WindowsPowerShell/5.1.17763.1971 - 500 0 0 30804
2076 20:35:07 INFO  HttpModule is being initialized
2260 20:35:17 INFO  **************************************************
2260 20:35:17 WARN  Sitecore shutting down
2260 20:35:17 WARN  Shutdown message: Initialization Error
HostingEnvironment initiated shutdown
2021-09-03 19:35:07 ::1 GET /healthz/ready - 80 - ::1 Mozilla/5.0+(Windows+NT;+Windows+NT+10.0;+en-US)+WindowsPowerShell/5.1.17763.1971 - 500 0 0 4130
&lt;/pre&gt;
&lt;p&gt;And if you're running XP, that will get errors for xConnect too:&lt;/p&gt;
&lt;pre data-enlighter-theme="droide-text" data-enlighter-language="text" style="width:100%; overflow:scroll;"&gt;2021-09-03 20:34:08.802 +01:00 [Error] XConnect Web Application Error: "System.ApplicationException: Exception trying to initialize Service Collection and Provider for WebAPI Dependency Resolver, Inner Exception: Required license is missing: Sitecore.xDB.Base ---&amp;gt; Sitecore.Nexus.Licensing.LicenseException: Required license is missing: Sitecore.xDB.Base
   at ?????????????????????????????????????????.(????????????????????????????????????????? , String )
   at Sitecore.XConnect.Configuration.Extensions.InitializeLicenseCheck(IServiceCollection collection, String licenseFileOrXml)
   at Sitecore.XConnect.Configuration.Extensions.UseXConnectServiceInitializationConfiguration(IServiceCollection collection, IConfiguration configuration, String[] configurationSectionNames, String initializationSectionName, Boolean validateConfiguration)
   at Sitecore.XConnect.Web.Host.WebApiConfig.ConfigureServices(HttpConfiguration config)
   --- End of inner exception stack trace ---
   at Sitecore.XConnect.Web.Host.WebApiConfig.ConfigureServices(HttpConfiguration config)
   at System.Web.Http.GlobalConfiguration.Configure(Action`1 configurationCallback)
   at Sitecore.XConnect.Web.Global.Application_Start(Object sender, EventArgs e)"
&lt;/pre&gt;
&lt;p&gt;And because the health service ends up receiving errors, the Traefik container will fail, and the &lt;code&gt;docker-compose up&lt;/code&gt; will return errors in the console too:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jermdavis.dev/img/2021/2021-09-failed.png" target="_blank"&gt;&lt;img alt="Failed Start" src="https://blog.jermdavis.dev/img/2021/2021-09-failed.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For Google's benefit, that set of messages is:&lt;/p&gt;
&lt;pre data-enlighter-theme="droide-text" data-enlighter-language="text" style="width:100%; overflow:scroll;"&gt;Creating network "sitecore-xp0_default" with the default driver
Creating sitecore-xp0_mssql_1 ... done
Creating sitecore-xp0_solr_1  ... done
Creating sitecore-xp0_id_1        ... done
Creating sitecore-xp0_solr-init_1 ... done
Creating sitecore-xp0_xconnect_1  ... done
Creating sitecore-xp0_cm_1        ... done

ERROR: for cortexprocessingworker  Container "5f077e60de91" is unhealthy.

ERROR: for xdbautomationworker  Container "5f077e60de91" is unhealthy.

ERROR: for xdbsearchworker  Container "5f077e60de91" is unhealthy.

ERROR: for traefik  Container "19caaac9dcea" is unhealthy.
ERROR: Encountered errors while bringing up the project.
&lt;/pre&gt;
&lt;p&gt;Now while someone used to reading logs will fairly quickly spot the underlying cause of the console errors there, one of the benefits of containers is supposed to be that it works easily for everyone in your team. Testers, managers or front-end devs are less likely to understand the business of running containers, and given the "sometimes Docker just doesn't work" issues that we've all encountered (&lt;a href="https://sitecore.stackexchange.com/a/28676/233" rel="noopener" target="_blank"&gt;looking at you AppCmd errors on v10.0&lt;/a&gt;) it's not always obvious to the less hard-core technical amongst us when the issue is "license" and when it's "you didn't apply the right Windows Update and now &lt;a href="https://i.pinimg.com/originals/b2/b4/9a/b2b49a89501c1c7c4fbdfa00966f47b2.gif" rel="noopener" target="_blank"&gt;Docker is UNHAPPY&lt;/a&gt;".&lt;/p&gt;
&lt;h2&gt;A helpful addition&lt;/h2&gt;
&lt;p&gt;So after my team crashed into this issue of not realising that license expiry was the problem they were seeing, I wondered if I could help with future problems by making my project's "up" script check if the license has expired before it tries to start any containers...&lt;/p&gt;
&lt;p&gt;This isn't too hard to do, it turns out. We know that the license you're using is encoded into the &lt;code&gt;.env&lt;/code&gt; file for your project. It's stored as a Base64-encoded GZip stream. (You can &lt;a href="https://github.com/Sitecore/docker-tools/blob/bf850cf7909624dc50c9e78b9a91c0a0593af89c/powershell/src/Public/ConvertTo-CompressedBase64String.ps1#L21" rel="noopener" target="_blank"&gt;look at how this is done by examining the source for the &lt;code&gt;SitecoreDockerTools&lt;/code&gt; module&lt;/a&gt; that the &lt;code&gt;init.ps1&lt;/code&gt; script installs) So to test this, we need some code which can decode the license XML from the environment file field, find the &lt;code&gt;&amp;lt;expiration/&amp;gt;&lt;/code&gt; element and check that date against the current date.&lt;/p&gt;
&lt;p&gt;A bit of Google and some quick hacking lead me to this function:&lt;/p&gt;
&lt;pre data-enlighter-language="powershell" style="width:100%; overflow:scroll;"&gt;function Validate-LicenseData
{
    Param (
        $EnvironmentFile = ".env",
        $EnvironmentKey = "SITECORE_LICENSE"
    )

    $file = Get-Content $EnvironmentFile -Encoding UTF8

    $key = $file | ForEach-Object {
        if($_ -imatch "^$EnvironmentKey=.*")
        {
            return $_.SubString($EnvironmentKey.Length + 1)
        }
    }
    
    $data = [System.Convert]::FromBase64String($key)

    $memory = [System.IO.MemoryStream]::new()
    $memory.Write($data, 0, $data.Length)
    $memory.Flush()   
    $memory.Seek(0, [System.IO.SeekOrigin]::Begin) | Out-Null

    $gzip = [System.IO.Compression.GZipStream]::new($memory, [System.IO.Compression.CompressionMode]::Decompress)
    
    $s = [System.IO.StreamReader]::new($gzip);
    $xml = $s.ReadToEnd()   

    $s.Dispose();
    $gzip.Dispose()
    $memory.Dispose();

    $xml -match '&amp;lt;expiration&amp;gt;(.*?)&amp;lt;/expiration&amp;gt;' | Out-Null
    $textExpiry = $Matches[1]

    $expiry = [System.DateTime]::ParseExact($textExpiry, "yyyyMMddThhmmss", [System.Globalization.CultureInfo]::InvariantCulture)

    if($expiry -lt [System.DateTime]::Now)
    {
        throw "Your Sitecore license has expired."
    }
    else
    {
        $daysLeft = [int]($expiry - [System.DateTime]::Now).TotalDays
        Write-Host "You have $daysLeft days left on your license." -ForegroundColor Green
    }
}
&lt;/pre&gt;
&lt;p&gt;(I'm sure I can make this code better with some more thought – but it's a start)&lt;/p&gt;
&lt;p&gt;It will decode the license, extract the expiry date and then check it. If the license is expired it will throw (which should stop a script). I've wired that up in the &lt;code&gt;up.ps1&lt;/code&gt; script in the project, so it checks the license before it kicks off the process of starting containers. Missing out the function above, it's something like:&lt;/p&gt;
&lt;pre data-enlighter-highlight="10" data-enlighter-language="powershell" style="width:100%; overflow:scroll;"&gt;Param(
    [switch]$build = $false,
    [switch]$attach = $false
)

try
{
	pushd ".\docker"

	Validate-LicenseData

	$buildFlag = ""
	if($build)
	{
		$buildFlag = "--build"
	}

	Write-Host "Starting: XP=$xp, Build=$build, Attach=$attach"

	$detachFlag = "--detach"
	if($attach)
	{
		$detachFlag = ""
	}

	docker-compose up $buildFlag $detachFlag
}
finally
{
	popd
}
&lt;/pre&gt;
&lt;p&gt;(The &lt;a href="https://gist.github.com/jermdavis/25655ee9c095d20d15caf42fa3d27ded" rel="noopener" target="_blank"&gt;full code is available as a gist&lt;/a&gt; if you want to make something of your own from it)&lt;/p&gt;
&lt;p&gt;So the result of that for an expired license is an error:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jermdavis.dev/img/2021/2021-09-badlicense.png" target="_blank"&gt;&lt;img alt="Bad License" src="https://blog.jermdavis.dev/img/2021/2021-09-badlicense.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And if the license is valid it will report how many days left you have, before carrying on with the normal startup:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jermdavis.dev/img/2021/2021-09-goodlicense-1.png" target="_blank"&gt;&lt;img alt="Good License" src="https://blog.jermdavis.dev/img/2021/2021-09-goodlicense-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hopefully that means in the future my developers will know right away if they've hit a license expiry situation, and they can update their &lt;code&gt;.env&lt;/code&gt; file...&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Sometimes you have a problem that you should absolutely have seen coming. The annual &amp;amp;quot;the company's Sitecore license has expired&amp;amp;quot; fun is very much one of those things. But I'd not thought about this in advance, and the license expired while I was on holiday this year. It caused my team a load of hassle... But I have a plan to avoid this pain in the future: &lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.jermdavis.dev/posts/2021/using-itemservice-in-containers</id>
		<title>Using ItemService in containers</title>
		<author>
			<name>Jeremy Davis</name>
		</author>
		<link href="https://blog.jermdavis.dev/posts/2021/using-itemservice-in-containers" />
		<link rel="enclosure" type="image" href="https://blog.jermdavis.dev/" />
		<updated>0001-01-01T00:00:00Z</updated>
		<content>&lt;p&gt;I was asked to enable Sitecore's ItemService endpoints on a containerised instance of Sitecore recently, and my first pass through this didn't work. Turns out there's a key bit of documentation that seems to be missing for this scenario. Hence a quick post to help get info into Google. So if you need to do this, read on: &lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;The issue&lt;/h2&gt;
&lt;p&gt;Out-of-the-box, the &lt;a href="https://doc.sitecore.com/en/developers/90/sitecore-experience-manager/the-itemservice.html" rel="noopener" target="_blank"&gt;ItemService&lt;/a&gt; endpoints aren't available to external requests. The project I was working on needed this to be available to other apps from the CM role, to allow for some other work that was going on. So &lt;a href="https://doc.sitecore.com/en/developers/90/sitecore-experience-manager/sitecore-services-client-security.html#security-policies_body" rel="noopener" target="_blank"&gt;based on the existing documentation&lt;/a&gt; for this, I added a config patch to the solution:&lt;/p&gt;
&lt;pre data-enlighter-language="xml" style="width:100%; overflow:scroll;"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;configuration xmlns:patch=&amp;quot;http://www.sitecore.net/xmlconfig/&amp;quot; xmlns:role=&amp;quot;http://www.sitecore.net/xmlconfig/role/&amp;quot;&amp;gt;
    &amp;lt;sitecore&amp;gt;
        &amp;lt;settings&amp;gt;
            &amp;lt;setting name=&amp;quot;Sitecore.Services.SecurityPolicy&amp;quot; role:require=&amp;quot;ContentManagement&amp;quot;&amp;gt;
                &amp;lt;patch:attribute name=&amp;quot;value&amp;quot;&amp;gt;Sitecore.Services.Infrastructure.Web.Http.Security.ServicesOnPolicy, Sitecore.Services.Infrastructure&amp;lt;/patch:attribute&amp;gt;
            &amp;lt;/setting&amp;gt;
        &amp;lt;/settings&amp;gt;
    &amp;lt;/sitecore&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;
&lt;p&gt;For most IaaS or PaaS deployments, that should be enough. But when you do that in a containerised deployment it doesn't work. If you make a call to the ItemService endpoint you'll get an error back when you try to authenicate. The key part of the response is the body:&lt;/p&gt;
&lt;pre data-enlighter-theme="droide-text" data-enlighter-language="text" style="width:100%; overflow:scroll;"&gt;HTTPS is required
&lt;/pre&gt;
&lt;p&gt;So what's missing?&lt;/p&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;The reason for the error is that when Sitecore runs in the suggested container setup, HTTPS requests have their SSL terminated at the Ingress Controller. (Which is going to be &lt;a href="https://github.com/traefik/traefik" rel="noopener" target="_blank"&gt;Traefik&lt;/a&gt; or &lt;a href="https://www.nginx.com/products/nginx-ingress-controller/" rel="noopener" target="_blank"&gt;Nginx&lt;/a&gt; if you're following the defaults) So when your API request to the ItemService arrives at its controller it's using HTTP not and HTTPS.&lt;/p&gt;
&lt;p&gt;The root cause of the error above comes from this bit of code in the &lt;code&gt;Sitecore.Services.Infrastructure.Web.Http.Filters&lt;/code&gt; namespace. It's a filter applied to all the endpoints for ItemService:&lt;/p&gt;
&lt;pre data-enlighter-highlight="7" data-enlighter-language="csharp" style="width:100%; overflow:scroll;"&gt;public class RequireHttpsFilter : AuthorizationFilterAttribute
{
	public override void OnAuthorization(HttpActionContext actionContext)
	{
		Assert.ArgumentNotNull(actionContext, &amp;quot;actionContext&amp;quot;);
		HttpRequestMessage request = actionContext.get_Request();
		if (!(request.get_RequestUri().Scheme == Uri.UriSchemeHttps) &amp;amp;&amp;amp; !_configurationSettings.get_AllowToLoginWithHttp())
		{
			if (request.get_Method().get_Method() == &amp;quot;GET&amp;quot;)
			{
				actionContext.set_Response(HttpRequestMessageExtensions.CreateResponse(request, HttpStatusCode.Found));
				actionContext.get_Response().set_Content((HttpContent)new StringContent(&amp;quot;HTTPS is required&amp;quot;, Encoding.UTF8, &amp;quot;text/html&amp;quot;));
				UriBuilder uriBuilder = new UriBuilder(request.get_RequestUri())
				{
					Scheme = Uri.UriSchemeHttps,
					Port = 443
				};
				actionContext.get_Response().get_Headers().set_Location(uriBuilder.Uri);
			}
			else
			{
				actionContext.set_Response(HttpRequestMessageExtensions.CreateResponse(request, HttpStatusCode.NotFound));
				actionContext.get_Response().set_Content((HttpContent)new StringContent(&amp;quot;HTTPS is required&amp;quot;, Encoding.UTF8, &amp;quot;text/html&amp;quot;));
			}
		}
	}
}
&lt;/pre&gt;
&lt;p&gt;And the answer to fixing this is hiding there in the highlighted line. There's a config setting you can supply to disable this &amp;quot;require HTTPS&amp;quot; behaviour.&lt;/p&gt;
&lt;p&gt;Doing a bit of a search, it turns out that setting has its default set in the &lt;code&gt;Sitecore.Services.Client.config&lt;/code&gt; file. So a second bit of config patching will make all this work happily in the containers:&lt;/p&gt;
&lt;pre data-enlighter-language="xml" style="width:100%; overflow:scroll;"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;configuration xmlns:patch=&amp;quot;http://www.sitecore.net/xmlconfig/&amp;quot; xmlns:role=&amp;quot;http://www.sitecore.net/xmlconfig/role/&amp;quot;&amp;gt;
    &amp;lt;sitecore&amp;gt;
        &amp;lt;settings&amp;gt;
            &amp;lt;setting name=&amp;quot;Sitecore.Services.AllowToLoginWithHttp&amp;quot; role:require=&amp;quot;ContentManagement&amp;quot;&amp;gt;
                &amp;lt;patch:attribute name=&amp;quot;value&amp;quot;&amp;gt;true&amp;lt;/patch:attribute&amp;gt;
            &amp;lt;/setting&amp;gt;
        &amp;lt;/settings&amp;gt;
    &amp;lt;/sitecore&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Problem solved.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I was asked to enable Sitecore's ItemService endpoints on a containerised instance of Sitecore recently, and my first pass through this didn't work. Turns out there's a key bit of documentation that seems to be missing for this scenario. Hence a quick post to help get info into Google. So if you need to do this, read on: &lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.jermdavis.dev/posts/2021/recovering-from-a-packaging-mistake</id>
		<title>Recovering from a packaging mistake</title>
		<author>
			<name>Jeremy Davis</name>
		</author>
		<link href="https://blog.jermdavis.dev/posts/2021/recovering-from-a-packaging-mistake" />
		<link rel="enclosure" type="image" href="https://blog.jermdavis.dev/" />
		<updated>0001-01-01T00:00:00Z</updated>
		<content>&lt;p&gt;A while back I got a support issue where a client's Content Editor was suddenly very broken. No UI – just a giant YSOD. It's turned out to be the sort of mistake which I could see happening to others, so here's some info on what happened and ways the problem can be resolved.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;The report&lt;/h2&gt;
&lt;p&gt;A bunch of people were working on content entry and migration on a new instance of Sitecore, and suddenly they found Content Editor was broken. Users could log in to Sitecore, the desktop was fine and Experience Editor seemed ok, but as soon as they tried to go to Content Editor it would crash:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jermdavis.dev/img/2021/2021-08-broken-ysod.png" target="_blank"&gt;&lt;img alt="Broken Content Editor" src="https://blog.jermdavis.dev/img/2021/2021-08-broken-ysod.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since that was blocking content creation work it was a Big Issue for the team. So off to the logs I went. The underlying exception was:&lt;/p&gt;
&lt;pre data-enlighter-theme="droide-text" data-enlighter-highlight="16" data-enlighter-language="text" style="width:100%; overflow:scroll;"&gt;Exception: System.Reflection.TargetInvocationException
Message: Exception has been thrown by the target of an invocation.
Source: mscorlib
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at Sitecore.Reflection.ReflectionUtil.InvokeMethod(MethodInfo method, Object[] parameters, Object obj)   at Sitecore.Shell.Applications.ContentManager.ContentEditorPage.OnPreRender(EventArgs e)
   at System.Web.UI.Control.PreRenderRecursiveInternal()
   at System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)

Nested Exception

Exception: System.NullReferenceException
Message: Object reference not set to an instance of an object.
Source: Sitecore.Buckets
   at Sitecore.Buckets.Commands.MakeTemplateBucketable.GetToolTip(CommandContext context, String tooltip)
   at Sitecore.Web.UI.WebControls.Ribbons.Ribbon.FillParamsFromCommand(CommandContext commandContext, RibbonCommandParams ribbonCommandParams)
   at Sitecore.Web.UI.WebControls.Ribbons.Ribbon.GetCommandParameters(Item controlItem, CommandContext commandContext)
   at Sitecore.Web.UI.WebControls.Ribbons.Ribbon.RenderSmallCheckButton(HtmlTextWriter output, Item button, CommandContext commandContext)
   at Sitecore.Web.UI.WebControls.Ribbons.Ribbon.RenderButton(HtmlTextWriter output, Item button, CommandContext commandContext)
   at Sitecore.Web.UI.WebControls.Ribbons.Ribbon.RenderChunk(HtmlTextWriter output, Item chunk, CommandContext commandContext)
   at Sitecore.Web.UI.WebControls.Ribbons.Ribbon.RenderChunk(HtmlTextWriter output, Item chunk, CommandContext commandContext, Boolean isContextual, String id)
   at Sitecore.Web.UI.WebControls.Ribbons.Ribbon.RenderChunk(HtmlTextWriter output, Item chunk, CommandContext commandContext, Boolean isContextual)
   at Sitecore.Web.UI.WebControls.Ribbons.Ribbon.RenderChunks(HtmlTextWriter output, Item strip, CommandContext commandContext, Boolean isContextual)
   at Sitecore.Web.UI.WebControls.Ribbons.Ribbon.RenderStrips(HtmlTextWriter output, Item ribbon, Boolean isContextual, ListString visibleStripList)
   at Sitecore.Web.UI.WebControls.Ribbons.Ribbon.RenderStrips(HtmlTextWriter output, Item defaultRibbon, Item contextualRibbon, ListString visibleStripList)
   at Sitecore.Web.UI.WebControls.Ribbons.Ribbon.Render(HtmlTextWriter output)
   at System.Web.UI.Control.RenderControlInternal(HtmlTextWriter writer, ControlAdapter adapter)
   at Sitecore.Web.HtmlUtil.RenderControl(Control ctl)
   at Sitecore.Shell.Applications.ContentManager.ContentEditorForm.UpdateRibbon(Item folder, Boolean isCurrentItemChanged, Boolean showEditor)
   at Sitecore.Shell.Applications.ContentManager.ContentEditorForm.Update()
   at Sitecore.Shell.Applications.ContentManager.ContentEditorForm.OnPreRendered(EventArgs e)
&lt;/pre&gt;
&lt;h2&gt;The issue&lt;/h2&gt;
&lt;p&gt;Thankfully there's a &lt;a href="https://stackoverflow.com/questions/54368811/sitecore-content-editor-throws-server-error-in-application-error" rel="noopener" target="_blank"&gt;fair amount in Google about this error&lt;/a&gt; – it comes down to having an item in your content tree whose template does not exist. The Content Editor UI was not implemented to cope with this (fairly exceptional) situation. Hence the exception...&lt;/p&gt;
&lt;p&gt;That crash is generally a bit of an issue when it happens with any old item – but it's particularly bad if the item in question happens to be "Home". The first item named "home" found under "/sitecore/content" is the one loaded automatically when Content Editor starts. So if this item is broken, then you're a bit stuffed, because Content Editor can't start up without encountering this crash.&lt;/p&gt;
&lt;h2&gt;The cause&lt;/h2&gt;
&lt;p&gt;After doing some digging, the cause of the issue here turned out to be that a whole tree of content had been imported from the "old website" instance of Sitecore. To people migrating content this made sense – it's easier to move stuff about and reformat it if it's in the same content tree as your new site. But unfortunately the editors in this case didn't realise that the new instance of Sitecore didn't have any of the templates from the old instance – so they'd accidentally created a tree of hundreds of items, none of which had valid templates.&lt;/p&gt;
&lt;h2&gt;So how can this be fixed?&lt;/h2&gt;
&lt;p&gt;Well the standard answer would be "install a package containing the right templates!" because if you do that, Content Editor will go back to being happy again immediately. But in this case that wasn't the right solution, because we didn't really want to have all the legacy content and templates in the shiny new instance of Sitecore.&lt;/p&gt;
&lt;p&gt;The alternative is that you need to get rid of the item which is causing all the issues. Not having access to Content Editor makes that slightly less easy, but you still have choices. Maybe you have PowerShell Extensions installed? If so that can be used to call &lt;code&gt;Remove-Item&lt;/code&gt; to perform the deletion. But if you don't, it's time to break out a classic old admin tool: DB Browser! You can access this from the &lt;code&gt;/sitecore/admin/&lt;/code&gt; url on your CM instance, and picking "DB Browser" from the menu:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jermdavis.dev/img/2021/2021-08-dbbrowser.png" target="_blank"&gt;&lt;img alt="DB Browser" src="https://blog.jermdavis.dev/img/2021/2021-08-dbbrowser.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As well as a useful tool, this image actually gives another clue to what's broken. When you look at a working item in DB Browser, it shows you the set of templates the item relies on to the right of the item's path:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jermdavis.dev/img/2021/2021-08-working.png" target="_blank"&gt;&lt;img alt="Working Item" src="https://blog.jermdavis.dev/img/2021/2021-08-working.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But in the case of our issue, (or similarly broken items) you'll see template(s) missing. In this case, since these items had no valid templates, that space to the right of the path was entirely empty:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jermdavis.dev/img/2021/2021-08-broken.png" target="_blank"&gt;&lt;img alt="Broken Item" src="https://blog.jermdavis.dev/img/2021/2021-08-broken.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But with this tool, it's an easy job to remove the broken item, by clicking the "Delete" button in the row of commands. With that done, Content Editor will sort itself out.&lt;/p&gt;
&lt;p&gt;In my case, that was all that needed doing to resolve the issue – well, that and a bit of user education to ensure everyone understood what had gone wrong...&lt;/p&gt;
</content>
		<summary>&lt;p&gt;A while back I got a support issue where a client's Content Editor was suddenly very broken. No UI – just a giant YSOD. It's turned out to be the sort of mistake which I could see happening to others, so here's some info on what happened and ways the problem can be resolved.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.jermdavis.dev/posts/2021/the-power-of-implicit-conversions</id>
		<title>The power of implicit conversions</title>
		<author>
			<name>Jeremy Davis</name>
		</author>
		<link href="https://blog.jermdavis.dev/posts/2021/the-power-of-implicit-conversions" />
		<link rel="enclosure" type="image" href="https://blog.jermdavis.dev/" />
		<updated>0001-01-01T00:00:00Z</updated>
		<content>&lt;p&gt;There are bits of the C# language that we don't think about too much when writing websites – and implicit conversions are one of those things. But while I've been messing about with some ray-tracing code in evenings recently, I found a couple of examples they patterns they can be a help with...&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;There are various places in a raytracer where you need to deal with angles. The orientation of geometry, working out the directions the rays travel in and how the light reflects and refracts. And wherever your expressing angles you need to choose your units. While a lot of maths is defined in terms of &lt;a href="https://en.wikipedia.org/wiki/Radian" rel="noopener" target="_blank"&gt;radians&lt;/a&gt;, I find that with my &amp;quot;not very good&amp;quot; maths skills, I think in terms of &lt;a href="https://en.wikipedia.org/wiki/Degree_(angle)" rel="noopener" target="_blank"&gt;degrees&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So how can I write the code so that it the internals work in the &amp;quot;right&amp;quot; angle units for their work, but I have the option to define things as degrees or as radians to suit my thinking?&lt;/p&gt;
&lt;h2&gt;The traditional approach&lt;/h2&gt;
&lt;p&gt;A lot of code which does units conversions provides helper methods to convert from one set of units to another. Something like:&lt;/p&gt;
&lt;pre data-enlighter-language="csharp" style="width:100%; overflow:scroll;"&gt;public void CalculateSomeAngles(double radians)
{
    ...
}

var radians = Math.ToRadians(45);
CalculateSomeAngles(radians);
&lt;/pre&gt;
&lt;p&gt;That's fine – but it's not really very type safe. Because the method takes a double, you can supply anything. And there's not really anything stopping you accidentally supplying degrees instead of radians.&lt;/p&gt;
&lt;p&gt;So what else could you do?&lt;/p&gt;
&lt;h2&gt;Types to the rescue&lt;/h2&gt;
&lt;p&gt;So what if our CalculateSomeAngles() method was explicit about the units it expected by expressing a type?&lt;/p&gt;
&lt;pre data-enlighter-language="csharp" style="width:100%; overflow:scroll;"&gt;
public struct Radians
{
    public double Value { get; private set; }
	
    public Radians(double value)
    {
        Value = value;
    }
}

public void CalculateSomeAngles(Radians radians)
{
    ...
}

CalculateSomeAngles(new Radians(1.1));
&lt;/pre&gt;
&lt;p&gt;With a wrapper type to be explicit about the units, it's harder to make a mistake. And we can also use this pattern to allow you to pass whatever units you prefer. We can define a struct for degrees too:&lt;/p&gt;
&lt;pre data-enlighter-language="csharp" style="width:100%; overflow:scroll;"&gt;public struct Degrees
{
    public double Value { get; private set; }
	
    public Degrees(double value)
    {
        Value = value;
    }
}
&lt;/pre&gt;
&lt;p&gt;But the magic here is adding some operators to allow the compiler to automatically do some conversions for us. If we add a &amp;quot;to degrees&amp;quot; conversion to the radians struct and the equivalent degrees struct:&lt;/p&gt;
&lt;pre data-enlighter-language="csharp" style="width:100%; overflow:scroll;"&gt;public struct Degrees
{
    public static implicit operator Radians(Degrees d)
    {
        return new Radians(d.Value * Math.PI / 180);
    }
}

public struct Radians
{
    public static implicit operator Degrees(Radians r)
    {
        return new Degrees(r.Value * 180 / Math.PI);
    }
}
&lt;/pre&gt;
&lt;p&gt;Then the compiler no longer cares which you pass – it will just convert to the one it needs in any situation...&lt;/p&gt;
&lt;p&gt;So you can write:&lt;/p&gt;
&lt;pre data-enlighter-language="csharp" style="width:100%; overflow:scroll;"&gt;CalculateSomeAngles(new Radians(1.1));
CalculateSomeAngles(new Degrees(72));
&lt;/pre&gt;
&lt;p&gt;And now I don't have to worry about my units.&lt;/p&gt;
&lt;h2&gt;And there's more...&lt;/h2&gt;
&lt;p&gt;Using this for unit conversion is one very simple usage for this approach. (And in fact, one you could argue can be solved in other ways) The other place I found this sort of pattern helpful was in implementation animations. I wanted to enable a situation where most (if not all) of the properties of objects in a scene could be animated. Broadly that means &amp;quot;animate the values of a double&amp;quot; or &amp;quot;animate a matrix&amp;quot;. And in both cases the implicit conversions idea can help.&lt;/p&gt;
&lt;p&gt;The pattern I ended up with for animation was that it needed a mechanism to set which frame is being rendered, and a mechanism to get the value for this point. Something like:&lt;/p&gt;
&lt;pre data-enlighter-language="csharp" style="width:100%; overflow:scroll;"&gt;public interface IAnimateable&amp;lt;T&amp;gt;
{
    T Value { get; }
    void SetFrame(int thisFrame, int frameCount);
}
&lt;/pre&gt;
&lt;p&gt;So if we have a material with &amp;quot;shinyness&amp;quot; that can be amimated, we can replace the normal &lt;code&gt;double&lt;/code&gt;-typed property with something which exposes this interface, and when the material gets initialised for a specific frame we just pass that data down to the animateable properties:&lt;/p&gt;
&lt;pre data-enlighter-language="csharp" style="width:100%; overflow:scroll;"&gt;public class PhongMaterial
{
    ....
    public IAnimateable&amp;lt;double&amp;gt; Shinyness { get; init ; }

    public void SetFrame(int thisFrame, int frameCount)
    {
        ....
        Shinyness.SetFrame(thisFrame, frameCount);
        ....
    }

    ....
}
&lt;/pre&gt;
&lt;p&gt;And we can have a whatever implementations of this animatable double we like. So to move between 1 and 100, we might declare something like:&lt;/p&gt;
&lt;pre data-enlighter-language="csharp" style="width:100%; overflow:scroll;"&gt;var someShape = new Sphere() {
    Material = new PhongMaterial() {
        Shinyness = new AnimatedRange(1, 100)
    }
};
&lt;/pre&gt;
&lt;p&gt;But the side effect of doing this is that when we don't need an animated value we still have to pass an object for that value:&lt;/p&gt;
&lt;pre data-enlighter-language="csharp" style="width:100%; overflow:scroll;"&gt;var someShape = new Sphere() {
    Material = new PhongMaterial() {
        Shinyness = new StaticValue(25)
    }
};
&lt;/pre&gt;
&lt;p&gt;But the trick above with implicit conversions can save us some typing here. The definition for the static value can help:&lt;/p&gt;
&lt;pre data-enlighter-highlight="14,15,16,17" data-enlighter-language="csharp" style="width:100%; overflow:scroll;"&gt;public class StaticValue : IAnimateable&amp;lt;double&amp;gt;
{
    public double Value { get; private set; }

    public StaticValue(double value)
    {
        Value = value;
    }

    public void SetFrame(int thisFrame, int frameCount)
    {
    }

    public static implicit operator StaticValue(double value)
    {
        return new StaticValue(value);
    }
}
&lt;/pre&gt;
&lt;p&gt;And now a value which doesn't animate can be declared as:&lt;/p&gt;
&lt;pre data-enlighter-language="csharp" style="width:100%; overflow:scroll;"&gt;var someShape = new Sphere() {
    Material = new PhongMaterial() {
        Shinyness = 25
    }
};
&lt;/pre&gt;
&lt;p&gt;This pattern has ended up very useful for both simple scene properties like above, and for more complex Matrix properties for transformations.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;There are bits of the C# language that we don't think about too much when writing websites – and implicit conversions are one of those things. But while I've been messing about with some ray-tracing code in evenings recently, I found a couple of examples they patterns they can be a help with...&lt;/p&gt;</summary>
	</entry>
</feed>